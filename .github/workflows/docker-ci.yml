name: Docker-CI

on:
  push:
    branches:
      - main  # declenche le workflow quand push sur main
  pull_request:
    branches:
      - main  

jobs:
  test:
    name: Run Unit Tests  
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3  # recup le code source du repo

      - name: Run Unit Tests
        working-directory: ./src 
        run: |
          echo "Lancemnt les tests unitaires..."
          php -v
          php ./Tests/delete_test.php
          php ./Tests/add_test.php

          echo "Tests done "

  build-and-push:
    name: Build and Push Docker Images  # job pour la construction et uplaod des images Docker
    needs: test
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin  #  connecte a dockerHub 

      - name: Build and Tag Docker Image
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')  # Génère un timestamp pour versionner l'image.
          docker build -t ${{ secrets.DOCKER_USERNAME }}/php-app:latest .  # Construit l'image Docker avec le tag latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/php-app:latest ${{ secrets.DOCKER_USERNAME }}/php-app:${TIMESTAMP}  # Tag l'image avec un tag timestamp
          echo "IMAGE_TAG=${TIMESTAMP}" >> $GITHUB_ENV  # Enregistre le tag dans une variable d'env

      - name: Push Docker Images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/php-app:latest  # Pousse l'image tag latest sur DockerHub
          docker push ${{ secrets.DOCKER_USERNAME }}/php-app:${{ env.IMAGE_TAG }}  # Pousse l'image avec le tag timestamp.
